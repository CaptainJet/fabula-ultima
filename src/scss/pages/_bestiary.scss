@use '../common/vars' as *;
@use '../common/vars' as mixins;

@use 'bestiary/actions';
// @use 'bestiary/equipment';
// @use 'bestiary/affinity';
// @use 'bestiary/attributes';
// @use 'bestiary/defenses';
// @use 'bestiary/extras';
// @use 'bestiary/bio';
// @use 'bestiary/other';

.bestiary {
  $this: '.bestiary';

  &--view {
    margin: 8px;
    max-width: 500px;
    background-color: var(--suface-container-lowest);

    box-shadow: var(--box-shadow-light);
    border-radius: 4px;

    display: flex;
    flex-direction: column;
    gap: 4px;

    * ~ .repcontrol {
      display: none;
    }

    .bio {
      display: grid;
      grid-template-columns: calc(4 * var(--input-component-size)) repeat(3, auto);
      grid-template-rows: auto 1fr;
      gap: 4px;

      input[name*='character_avatar']:not([value='']) ~ {
        .bio__avatar {
          display: block;
          grid-row: span 3;
        }
        .bio__name {
          grid-column: span 2;
        }
        .bio__description,
        .bio__traits {
          grid-column: 2 / span 3;
        }
      }

      &__avatar {
        display: none;

        border: 1px solid var(--color-fabula0);
        border-image: var(--fabula-gradient-dark-border);
        height: 10rem;

        img,
        svg {
          // max-height: calc(4 * var(--input-component-size));
          object-fit: cover;
          height: 100%;
          width: 100%;
        }
      }

      &__name {
        grid-column: span 3;
        background-image: var(--fabula-gradient-primary);
        color: var(--color-on-dark);
        padding-left: 16px;
        padding-right: 16px;
        span {
          display: flex;
          align-items: center;
          height: 100%;
          @include mixins.text-xxl-500-fabula;
        }
      }

      &__meta {
        display: flex;
        gap: 4px;

        padding: 4px 16px;
        border-left: 2px solid var(--color-fabula2);
        border-bottom: 2px solid var(--color-fabula2);
        border-image: var(--fabula-gradient-secondary-border);

        label,
        span {
          @include mixins.text-xl-500-fabula;
        }

        input[value='soldier'] {
          ~ span[name*='rank'] {
            font-size: 0;
          }
        }
      }

      &__description {
        grid-column: 1/-1;
        border-bottom: 1px solid var(--color-fabula2);
        border-image: var(--fabula-gradient-primary-border);
        padding: 4px 16px;
        @include mixins.text-base-400;
      }
      &__traits {
        grid-column: 1/-1;
        padding: 4px 16px;

        label {
          @include mixins.text-base-700;
          &::after {
            content: ':';
          }
        }
        span {
          @include mixins.text-base-400;
        }
      }
    }

    .statistics {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 4px;

      .attributes {
        grid-column: span 2;

        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 4px;

        align-items: center;
        justify-content: space-between;

        height: min-content;

        text-align: center;

        border: 1px solid var(--color-fabula0);
        border-left: none;
        border-image: var(--fabula-gradient-dark-border);

        .chimera-value {
          padding: 4px;
          label {
            @include mixins.text-lg-700-fabula;
          }
          span {
            @include mixins.text-lg-700-fabula;
            &::before {
              content: 'd';
              text-transform: lowercase;
            }
          }

          @each $attr in 1, 2, 3, 4 {
            &:nth-of-type(#{$attr}) {
              background-color: color-mix(
                in srgb,
                white #{50% + $attr * 10%},
                var(--color-fabula2)
              );
            }
          }
        }
      }

      .points {
        grid-column: span 2;

        display: grid;
        grid-template-columns: repeat(4, auto) 1fr;
        gap: 4px;

        text-align: center;

        border: 1px solid var(--color-fabula0);
        border-right: none;
        border-image: var(--fabula-gradient-secondary-border);

        label,
        span {
          @include mixins.text-lg-700-fabula;
          text-align: center;
        }

        &__label {
          width: var(--input-component-size);
        }

        &__label,
        &__hp,
        &__mp,
        &__initiative {
          padding: 4px;
        }

        &__hp,
        &__mp {
          padding-inline: 8px;
          color: var(--color-on-dark);
        }
        &__hp {
          display: flex;
          gap: 4px;
          background-color: var(--color-hp);
        }
        &__mp {
          min-width: 4rem;
          background-color: var(--color-mp);
        }
        &__initiative {
          display: flex;
          justify-content: space-evenly;
        }
      }

      .defenses {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 4px;

        align-items: center;
        justify-content: space-between;

        height: min-content;

        text-align: center;

        border: 1px solid var(--color-fabula0);
        border-left: none;
        border-image: var(--fabula-gradient-dark-border);

        .chimera-value {
          padding: 4px;
          label {
            @include mixins.text-lg-700-fabula;
          }
          span {
            @include mixins.text-lg-700-fabula;
          }

          @each $attr in 1, 2 {
            &:nth-of-type(#{$attr}) {
              background-color: color-mix(
                in srgb,
                white #{50% + $attr * 10%},
                var(--color-fabula2)
              );
            }
          }
        }
      }

      .affinities {
        grid-column: span 3;

        display: grid;
        grid-template-columns: repeat(9, minmax(3rem, auto));
        gap: 2px;

        text-align: center;

        border: 1px solid var(--color-fabula0);
        border-right: none;
        border-image: var(--fabula-gradient-primary-border);

        label,
        span {
          @include mixins.text-lg-700-fabula;
          text-align: center;
          white-space: nowrap;
          color: var(--color-hp);
          text-transform: uppercase;
        }
      }

      .affinity--cell {
        display: grid;
        grid-template-columns: 1.5rem auto;
        align-items: center;

        padding: 2px;

        @each $attr in 1, 2, 3, 4, 5, 6, 7, 8 {
          &:nth-of-type(#{$attr}) {
            border-right: 1px solid color-mix(in srgb, white #{$attr * 12%}, var(--color-fabula5));
          }
        }

        label {
          @include mixins.sr-only;
        }

        input:not([value]),
        input[value=''] {
          + img {
            opacity: 0.25;
            filter: grayscale(1);
          }
        }
      }
    }

    .status-effects {
      display: grid;
      grid-template-columns: repeat(6, 1fr);
      gap: 4px;
    }

    .status-effect {
      img,
      svg {
        margin: 0;
        filter: none;
      }
    }

    .attacks {
      &--delete {
        .attack {
          // @include fabula-check;
        }
      }
      &__name {
        grid-column: span 3;
        background-image: var(--fabula-gradient-primary);
        color: var(--color-on-dark);
        padding-left: 16px;
        padding-right: 16px;
        span {
          display: flex;
          align-items: center;
          height: 100%;
          @include mixins.text-xxl-500-fabula;
        }
      }
    }
  }

  &--edit {
    // @import 'bestiary/actions';
    @import 'bestiary/equipment';
    @import 'bestiary/affinity';
    @import 'bestiary/attributes';
    @import 'bestiary/defenses';
    @import 'bestiary/extras';
    @import 'bestiary/bio';
    @import 'bestiary/other';

    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 8px;

    padding: 8px;
    background-color: var(--background);

    > div {
      height: min-content;
    }

    .bio {
      grid-column: 1 / span 3;
    }
    .attributes {
      grid-column-start: 1;
    }
    .attributes__distribution {
      grid-column: span 3;
    }
    .affinities {
      grid-row: 3 / span 2;
    }
    .affinities__skillcost {
      grid-column: span 2;
    }

    .defenses {
      grid-column: 2;
      align-self: flex-end;
    }
    .extras {
      grid-column: 3;
      align-self: flex-end;
    }
    .extra--checkboxes {
      grid-column: 4;
      align-self: flex-end;
    }

    .shield,
    .weapons {
      grid-column: 3 / span 2;
    }

    .armor,
    .attacks {
      grid-column: 1 / span 2;
    }

    .spells {
      grid-column: 1/-1;
    }
  }
}
