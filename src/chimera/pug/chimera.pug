-
  const buildCSS = (args) => {
    const css = [args.block, ...args.names ?? []];
    if (args?.modifiers) {
      args.modifiers.forEach((mod) => css.push(`${args.block}--${mod}`))
    }
    return css;
  };

//- https://github.com/pugjs/pug/issues/1693#issuecomment-894801220
//- https://codepen.io/Vectorjon/pen/GRmYWjN
mixin chimera-block(key, marker=false)
  - global.my_blocks = global.my_blocks || {};
  if marker
    if global.my_blocks[key]
      - let temp = {};
      - temp[key] = global.my_blocks[key];
      - global.my_blocks[key] = null;
      - temp[key]();
    else
      block
  else
    - global.my_blocks[key] = this.block;

mixin chimera-layout(blob)
  //-

mixin chimera-switch(blob)
  .chimera-switch
    input(name=blob.attr, type='hidden')
    .chimera-switch__group
      each option in blob.options
        label.chimera-switch__label
          input(id=blob.name, name=blob.attr, type='radio', value=option.value)
          +chimera-icon({ icon: option.image })
          span(data-i18n=option.value)= option.text

mixin chimera-checkbox(blob)
  - const namespace = 'chimera-checkbox';
  - const css = blob.css ? buildCSS({ block: namespace, ...blob.css }) : namespace;
  - const attr = `attr_${blob.name}`;
  - const image = blob.image ?? 'checkbox';
  label(class=css)
    .chimera-checkbox__field
      input(id=blob.name, name=attr, type='checkbox', value=blob.value)
      +chimera-icon({ icon: image })
    span.chimera-checkbox__label(data-i18n=blob.name, for=blob.name)= blob.label

mixin chimera-hidden(field, value)
  input.chimera-hidden(name=`attr_${field}`, type='hidden', value=value)&attributes(attributes)

mixin chimera-input-element(blob)
  - const blobTitle = blob.title ?? blob.label;
  case blob.type
    when 'hidden'
      input(id=blob.name, name=blob.attr, type=blob.type, value=blob.value)&attributes(attributes)

    when 'textarea'
      textarea(
        class=blob.inputClass,
        data-i18n-title=`${blob.name}_title`,
        id=blob.name,
        name=blob.attr,
        title=blobTitle,
        type=blob.type
      )&attributes(attributes)

    when 'select'
      select(
        class=blob.inputClass,
        data-i18n-title=`${blob.name}_title`,
        id=blob.name,
        name=blob.attr,
        title=blobTitle
      )&attributes(attributes)
        each option, index in blob.options
          - const isSelected = index === 0 || option.value === blob.value || option.selected;
          option(data-i18n=option.name, selected=isSelected, value=option.value)= option.text

    when 'checkbox'
      +chimera-checkbox(blob)

    when 'switch'
      +chimera-switch(blob)

    when 'number'
    when 'text'
    default
      input(
        class=blob.inputClass,
        data-i18n-title=`${blob.name}_title`,
        id=blob.name,
        max=blob.max,
        min=blob.min,
        name=blob.attr,
        step=blob.step,
        title=blobTitle,
        type=blob.type,
        value=blob.value
      )&attributes(attributes)

mixin chimera-html-element(blob)
  //-

mixin chimera-icon(blob)
  - const { src, title } = assets[blob.icon];
  img(data-i18n-title=`${blob.icon}_title`, src=src, title=title)

mixin chimera-input(blob)
  - const namespace = 'chimera-input';
  - const css = blob.css ? buildCSS({ block: namespace, ...blob.css }) : namespace;
  - const inputClass = `${namespace}__field`;
  - const attr = `attr_${blob.name}`;

  if blob.type === 'checkbox'
    +chimera-checkbox(blob)

  else
    div(class=css)
      if blob.icon
        +chimera-icon(blob)

      if blob.label
        label.chimera-input__label(data-i18n=blob.name, for=blob.name)= blob.label

      if blob.type
        +chimera-input-element({ inputClass, attr, ...blob })

      if blob.html
        +chimera-html-element({ inputClass, ...blob })

mixin chimera-value(blob)
  - const namespace = 'chimera-value';
  - const css = blob.css ? buildCSS({ block: namespace, ...blob.css }) : namespace;
  - const valueClass = `${namespace}__field`;
  - const attr = `attr_${blob.name}`;
  div(class=css)
    if blob.label
      - const datai18n = blob.name ?? blob.label.replace(' ', '_').toLowerCase();
      label.chimera-value__label(data-i18n=datai18n, for=blob.name)= blob.label

    if blob.content
      span.chimera-value__value(data-i18n=blob.name)= blob.content

    else
      - const dynamic_i18n = blob.dynamic ? 'data-i18n-dynamic' : null;
      span.chimera-value__value(data-i18n-dynamic=dynamic_i18n, name=`attr_${blob.name}`)&attributes(attributes)

mixin chimera-span(blob)
  - const dynamic_i18n = blob.dynamic ? 'data-i18n-dynamic' : null;
  span(data-i18n-dynamic=dynamic_i18n, name=`attr_${blob.name}`)&attributes(attributes)

mixin chimera-repeater(fieldset)
  block
  .chimera-repeater
    +chimera-hidden(`${fieldset}_empty`, 0).chimera-repeater--is-empty
    .chimera-repeater__empty
      - const emptyKey = `none_${fieldset}_repeating`;
      - const emptyHeader = `No ${fieldset.replace(/[-_]+/g, ' ')} saved.`;
      h2.chimera-repeater__empty-header(data-i18n=emptyKey)= emptyHeader
      span.chimera-repeater__empty-subtitle(data-i18n='click_add_to_add') Click +Add to load data.
    fieldset(class=`repeating_${fieldset}`)
      .chimera-repeater__content
        .chimera-repeater--edit(class=`${fieldset}--edit`)
          +chimera-block('edit', true)
        .chimera-repeater--delete(class=`${fieldset}--delete`)
          +chimera-block('delete', true)
        .chimera-repeater--view(class=`${fieldset}--view`)
          +chimera-block('view', true)
